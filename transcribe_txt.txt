Alright. So today we'll be discussing the open source code open source project and the code review project we have. And so let's get right. So starting off um, first of all let me go review the code review assignment for you guys. So basically this code review assignment is um doing like ten days. I think it's um just a simple paper on a certain open source project. You find um, and one few criteria that ask me is that it's detailed as a beginner or starter issue. So that means it's something um that mentions that it has beginner or starter friendly um, um, assignments or issues that you could work on on the project. Uh, I'll get into the open source project in a bit, but um the code review um repository, you find you're free to basically use the um same code review project into code review repository onto the open source project as well. Um, you basically just have to get some information about that repository and write a few paragraphs about it. Um, I'll show you exactly where you can find all these information on these slides for today. Um, um, so first of all here um are some. Once you open the GitHub repository, here are some of um the things um you'll see. This is the first thing you'll see on any GitHub page. First um of all in the middle you have the amount of commits you have. That kind of shows how big of a scale the project is depending on how many commits there are in um the bottom very important the um language there is for the project. So let's say you're not really familiar with Python. You might want to stay away from that sort of project unless um, you want to challenge yourself and work on a Python project here. Uh, you can see there's a little bit of C plus plus, but um, mostly you'll be working on Python on um, the top right you can see the amount of watches, stars and Forks. So what's the difference between all those three are, is for Watch. It's basically you're um able to get a notification of the updates of any GitHub on the GitHub repository. So anyone makes the update. Um, you basically get a notification for it. Um, Star is just the same thing as Watch, but you don't get the notification so you get to just save um it on your GitHub somewhere. And forg is a little bit different in that it basically makes a copy of the repository, um, and it lets you basically work with the project without basically changing the main original repository. But the good thing about the fork is that you can fetch updates from the original repository and also you could submit changes to the original repository through the fork, the copied repository. So fork is a great way um working on any open source project and I'll show you the steps on how to do that. Later on. But that's um, something to remember. Um, so a few key takeaways. This um is the README page for this certain GitHub repository. And one thing to keep in mind is that the README will always certainly if it's a good repository, have a welcome uh page along with some instructions on how to change code for here. This uh one specifically has one made for people that want to contribute. It's like their first time contributing. So that's always a good sign, beginner friendly or has good first issues. Um, also some of the repositories will have agreements um that you have to sign. So be careful about that and you um have to make sure you follow all the steps necessary. Also, um, within the README there should be some um sort of guidelines as to how you should code. Like the coding style that's um important just because you always want to make sure that you're following um how they code since it's a project uh where everyone can work together and if you code in a certain style that they're not matching with, then um it will cause some issues with other people. So just make sure you follow the guidelines, read through them and read through the README. This is a citation on GitHub, uh it should be in the README as well. Uh, so that's the citation. Uh, one of the guidelines for the code review is that you have to find like a beginner uh friendly or first issue which is basically for beginners. But in order uh to do that you simply go to the certain GitHub repository and click on the issues tab on the tabs section. So here um, you can see if we click on issues. This is what will pop up and what you will do is then go to the label section over here um where it's circled uh in red and you could see that there's um, a good first issue. So that means there will be some people working on the project and have an issue um set up for newcomers. And that just um, means that it's an issue that they thought would be easy um and will help people to get more in depth into the open source project. So that's something to keep in mind when you're always looking for um uh, a repository to work on or just working on the code review assignment as well. So now we'll get into um, basically how to um make any um, changes into open source project, what kind of guidelines you should tend to follow. And I'll be using this GitHub repository today which is a simple first contribution repository just to learn how to contribute on to open source project. So first you want to fork the repository. Like um mentioned, fork makes a copy of repository but has additional um features to let you update changes they made onto the main source and um pull requests onto the original repository if you wanted to. As you can see, I really worked on this last semester, but um, you could fetch upstream and basically it'll be up to date with basically the original repository, which is a great part about fork. So let's get right into this. So, um, yeah, fork. You first want to fork the repository and make the copy. Then you want to clone the fork repository, not the actual original repository. So cloning it is just simple in that you uh, open my Finder. Sorry. Um, where can I find these slides? The slides will be posted on Canvas. I believe it will be on the resources folder. Uh, but I'll make an um, announcement. Once we post it, we just have to make sure we will post it after all the discussions. Um, finished just to make sure, um, everyone hasn't seen the slides yet. But yeah, don't worry about that, we will post it as soon as possible. So you want to clone the repository onto the Ford repository onto your local device. So in order to do that you will want to find the location that you want to clone it. In this case it's like a folder as it's cloned. I don't know. And then you want to open a terminal at that certain folder that you want to clone in and just simply type in the command get cloned and the URL that you find. So in this case you can find it, um, on the green logo, um, just copy the Https URL and then what that will do is basically clone and make a whole new report, uh, basically get all the information from the GitHub onto your local device. So that's the second step. And um, once you're done with the cloning process, you'll um, want to get into the actual repository. What I mean by this is that once that's done you can see that I said I um, closed it onto this folder. However, you could see that they made a new folder inside the folder that I made. So we're still on this initial folder but we haven't gone into this folder, which is the most important part. So if you list the folders here, you can see that there is a folder within the folder. So you'll want to change the directory on uh, mhm. Uh. Hey Mark, you're not muted. Thank you. Uh, so once you do that, uh, now you're on to the first contribution or the GitHub repository like mentioned last um week. Uh, one important thing is that you don't work on the main source code because that's something the main folder, the original branch. Um, because that's something that if you run into any errors, uh, and you push it by accident, you won't have a working code. So you want to check out a new branch. Any branch, uh, you want name. Uh, you want. Usually what people use is like, um, the exact issue you're working on. For example, if you're working on a sign in issue, I'll go get checkout bsign issue and then that's what I'll be doing. So let's say hello. I don't know hello. Uh, so now I switched into this new branch called hello in order to check it which branch you are, you could use the gift status command to see. Oh yeah, on branch hello. So that's just good practice, um, just to see which branch you are in. And this made a branch for the repository you just made. And now you are free to work on the assignment. Right? So in this case you'll want to open the contributors dot. Md file in any sort of text file. Um, and then this project is basically just adding your name onto the source. So I just feel like type in, uh, not even going to add it. And one thing important, once you add any changes you want on the code, you want to make sure you save it because sometimes it um, wouldn't show up and you'll be like wait, I made changes, but that's because you haven't saved it. So let me go back to the terminal. Um, so next you want to, um, put gift status. Um, to see status is always a great way to see what kind of changes you uh, made that hasn't been committed yet. Right? So here you can see in red that I made changes to the um, contributors. Md file but have not committed uh, anything or added it to or pushed it, um, at all. Um, so we want to do that. In order to do that, you just follow the get cycle. We listed it in the slide, um over here. First you want to get add a certain file. Um, if you want to do a bunch of files at once, you put get add in a space period so that it adds all the files. But let me do that really quickly. Get add status, it should show green. Yeah. So now that means that I have added the changes on to the gate and we're um, ready to commit it. So now we will commit, meaning we'll just uh, push it over to the GitHub. I shouldn't say push. Um commit it over to the GitHub. Um, we could put get commitsm is just a message, that message you uh, want to put. So usually you want to explain like what kind of commit if this is a simple short command. So in this case we'll click add now that's committed and now this command we'll basically push any changes you make on your branch onto the original the master code uh, that we have. So if we could get push origin and then the branch name we had. So we had hello. Yeah, hello. Boom. It should be good to go. Now if you look, um, at the GitHub repository, it might take a few moments, um, to see what's going on. But here, if you look at branches. Branches. Um, here you can see that there's a hello, uh, branch. I've tried it multiple times. Just kind of ignore those, uh, other ones. But hello, branch. You can see, um, that there's been a change a minute ago. Now we're just waiting, um, on the pull request that, uh, should have it. Yeah. So now the next step is basically submitting the changes you had onto for review using the compare and pull request. And in order to do that, you have to go on to the GitHub repository, uh, and on the master, uh, code. In the master code, we, um, press compare and pull request. And if we do this, you can make, uh, a pull request. Meaning, uh, you're, uh, able to let others people see what kind of changes you made and other people can accept it so that multiple people view it, uh, and view the changes so that there's no errors in the code. Um, and then click Pool, crest. And that should be good to go. Maybe leave comments such as Hello, I don't know. Yeah, that's how you basically, um, make any changes, uh, to a certain repository you have. Open source repository you, um, have. It's also a good practice to do this in the project you will be working on later in the semester just because you always want to make, uh, sure that you're not working on the original, uh, code. Um, is there any questions? Okay, let me look at where did I find these, uh, recordings? Yes. So I just uploaded them. I forgot about them. I'll be updating these, uh, onto this YouTube. It's unlisted and, um, no one else can see it other than us, I think. Hopefully so that's, uh, where discussions will all go. So feel free to save that message anywhere. Um, next, I'll be going over a little bit. Next, I'll be going over a little bit about the open source project. So here we have two assignments. If you look at your assignments, there's four assignments. Code review I went over and, uh, open source project approval and open source contribution is one of the next, um, few assignments there is. So open source project um, approval is basically a part of open source contribution. And if you have not read this, I'll just go over it very quickly. Um, this is basically, um, where you have to find an open source project and try to contribute to it in a certain way. It, uh, could be a new feature added, um, or you could try to fix an issue. Now, it's made on, uh, GitHub through that repository. Um, but you will have to basically submit a recording, um, of any changes you made. And, um, like the experience you had talking about the project description, uh, the changes you made, the um, code that you changed, and basically the stuff listed on this description of the assignment. And one thing important to do that was just added recently is that I would have to approve the project that you are going to be working on. So in the open source project approval page you will have to send um, me a link of the GitHub or just uh like a description. A little description about like um, if you want um to work on that certain type of project and I'll approve it. This will be due Friday uh by 11:59 p.m. And some of the few criteria, um it has to be active. The repository should um be active. Um, another criteria is that you should have at least 1000 stars on the GitHub repository. So that's another criteria, uh, that just shows that uh, um, it's a quite um, big repository and so that it will be easier to find a first issue or the beginner uh, issue. You have any tips for finding a good repo to work on? I've never really worked on an open source project before but we do have. I was going to go on to this next. We do have some potential links with um, different repositories. Uh, you can work on this idea and I know there's some people that have been sending some open source projects um on this Slack so you could take a look at those. Um, do we have to get approval for it? Yeah. So there is extra credit which basically Fernando mentioned, um, if we have to get approved, um, it doesn't have to get approved but um, it would be extra credit, um if your contribution is accepted. I don't know how big the extra credit will be. They haven't really told me that but um, I could ask in uh the Slack or you guys could just message it. But if the code uh, review is mostly about the paper. Um, yeah. So you're um answering this question for the actual contribution he was asking about the code review, not the contribution. No, the code review does not have to get approved on. So basically um, you don't have to get approved on the code review. Um, but you do want to find a project that kind of relates to both so that you don't have to do extra work on finding a uh, new open source repository. Sorry about that. Make sure it's um, at least 1000 stars. Um. And um, another criteria. One rule that we have is that it can't be open source project from another US student just to make sure that um, it's not an uh, easy assignment. Does that make sense? And uh, it's part of the approval dependent on how big or small the change we tend to make. That will depend um, on the type of issue or feature you add on and what they had written down as what uh, you need to do. So it will all depend on that certain repository. So honestly it could be a small change and if I just see that they accepted it. I would, uh, probably give you extra credit, if that makes sense. Yeah. So, yeah, that's the open source contribution assignment. Does anyone have any questions on anything so far? Sorry. I kind of sped through a lot of things. Any question is fine. Um, so make sure you, um, submit the GitHub, um, link onto the open source project approval sign as soon as possible, and, um, I'll try to respond as soon as possible as well. Can the open source reportedly? Yeah. So, um, that could be the same thing. So I kind of recommend you guys to try to find one that's good for both, Because that will save you time. Any other questions about anything? Um, and if there's no other questions, Feel free to, um, before you leave, actually, I want to take a screenshot of the participants. Sorry, I should have done that earlier, but, yeah, feel free to shoot me a message if you have any questions, make sure to complete your assignment, guys. Yeah, that's about it for this discussion. Um, feel free to stay after if, um, you have questions to, uh, me directly, And I'll be here until the end of discussion. Thank you, guys. Hope you have a great day. Um, yeah, it's too cold right now. Bye, guys. Have a good day. Tortillo. Oh, that's so nice. I've seen those on Amazon. Mhm where are the slides again? I missed a part of where to find the stars. Yeah, so I can show you where to, um, find the stars right now. You can find it. Let's say this is like a GitHub repository you find on top, right? It has the stars. That's where the amount of stars are. So if you see this, um, one has 22.1K, right? You could find a start there, but I'm not sure where the slides will be posted, but I'll send the announcement once the slide is posted for you guys, so that, um, I'll, uh, show you exactly where it is And I'll send a link to the discussion recording as well. But I'll send it right now as well, so it's right here. Um, let me know if you could see it. If not, I'll keep on uploading this until the end of the whole semester, basically. Uh, oh, wait. The person, um, with the what's your name? Because, uh, I need to put attendance, and, uh, I kind of don't know your name and I don't want to miss you, so you can private message me your name if you want. Uh, but I just want to know your name for your attendance. I will stop my screen sharing now and I'm stopped at the recording as well.